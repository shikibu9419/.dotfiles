#----------------------------------------------
# Completion
#----------------------------------------------
[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  "" Completion setting
  set completeopt+=noinsert

  let g:deoplete#enable_at_startup = 1
  let g:deoplete#auto_complete_delay = 0
  let g:deoplete#auto_complete_start_length = 1
  let g:deoplete#enable_camel_case = 0
  let g:deoplete#enable_ignore_case = 0
  let g:deoplete#enable_refresh_always = 0
  let g:deoplete#enable_smart_case = 1
  let g:deoplete#file#enable_buffer_path = 1
  let g:deoplete#max_list = 10000

  inoremap <expr><tab> pumvisible() ? "\<C-n>" :
          \ neosnippet#expandable_or_jumpable() ?
          \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''
hook_source = '''
  call deoplete#custom#var('omni', 'input_patterns', {
      \ 'ruby': ['[^. *\t]\.\w*', '[a-zA-Z_]\w*::'],
  \})
'''
if = "has('nvim')"
on_i = 1

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'

[[plugins]]
repo = 'zchee/deoplete-go'
on_ft = 'go'

#----------------------------------------------
# Snippets
#----------------------------------------------
[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_source = '''
  let g:neosnippet#snippets_directory = '$DOTPATH/vim/snippets/, $XDG_CACHE_HOME/dein/repos/github.com/Shougo/neosnippet-snippets/neosnippets/'
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''
on_i = 1
depends = 'neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

#----------------------------------------------
# Unite & Denite
#----------------------------------------------
[[plugins]]
repo = 'Shougo/unite.vim'
if = "!has('nvim')"

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  " " コピペ (https://qiita.com/lighttiger2505/items/e0ada17634516c081ee7)
  " " Denite用プレフィックス
  " nmap [denite] <Nop>
  " map <C-j> [denite]
  "
  " " プロジェクト内のファイル検索
  " nmap <silent> [denite]<C-P> :<C-u>Denite file_rec -highlight-mode-insert=Search<CR>
  " " バッファに展開中のファイル検索
  " nmap <silent> [denite]<C-B> :<C-u>Denite buffer -highlight-mode-insert=Search<CR>
  " " ファイル内の関数/クラス等の検索
  " nmap <silent> [denite]<C-O> :<C-u>Denite outline -highlight-mode-insert=Search<CR>
  " " dotfiles配下をカレントにしてfile_rec起動
  " nmap <silent> [denite]<C-V> :<C-u>call denite#start([{'name': 'file_rec', 'args': ['~/.dotfiles']}]) -highlight-mode-insert=Search=Search<CR>
  "
  " " 上下移動を<C-N>, <C-P>
  " call denite#custom#map('normal', '<C-N>', '<denite:move_to_next_line>')
  " call denite#custom#map('normal', '<C-P>', '<denite:move_to_previous_line>')
  " call denite#custom#map('insert', '<C-N>', '<denite:move_to_next_line>')
  " call denite#custom#map('insert', '<C-P>', '<denite:move_to_previous_line>')
  " " 入力履歴移動を<C-J>, <C-K>
  " call denite#custom#map('insert', '<C-J>', '<denite:assign_next_text>')
  " call denite#custom#map('insert', '<C-K>', '<denite:assign_previous_text>')
  " " 横割りオープンを`<C-S>`
  " call denite#custom#map('insert', '<C-S>', '<denite:do_action:split>')
  " " 縦割りオープンを`<C-I>`
  " call denite#custom#map('insert', '<C-I>', '<denite:do_action:vsplit>')
  " " タブオープンを`<C-O>`
  " call denite#custom#map('insert', '<C-O>', '<denite:do_action:tabopen>')
  "
  " " file_rec検索時にfuzzymatchを有効にし、検索対象から指定のファイルを除外
  " call denite#custom#source(
  "     \ 'file_rec', 'matchers', ['matcher_fuzzy', 'matcher_project_files', 'matcher_ignore_globs'])
  "
  " " 検索対象外のファイル指定
  " call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
  "     \ [ '.git/', '.ropeproject/', '__pycache__/',
  "     \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])
'''
if = "has('nvim')"

#----------------------------------------------
# Python
#----------------------------------------------
[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = 'python'

#----------------------------------------------
# Rails
#----------------------------------------------
[[plugins]]
repo = 'tpope/vim-rails'
on_ft = 'ruby'

[[plugins]]
repo = 'todesking/ruby_hl_lvar.vim'
on_ft = 'ruby'

#----------------------------------------------
# TeX
#----------------------------------------------
[[plugins]]
repo = 'lervag/vimtex'
hook_source = '''
  let g:vimtex_compiler_latexmk = {
        \ 'background': 1,
        \ 'build_dir': '',
        \ 'continuous': 1,
        \ 'options': [
        \    '-pdfdvi',
        \    '-verbose',
        \    '-file-line-error',
        \    '-synctex=1',
        \    '-interaction=nonstopmode',
        \],
        \}
  let g:vimtex_compiler_latexmk = {'callback': 0}
  let g:vimtex_latexmk_continuous = 1
  let g:vimtex_latexmk_options = '-pdfdvi'
  let g:tex_conceal = ''
  let g:vimtex_fold_envs = 0
  let g:vimtex_view_general_viewer = '/Applications/Skim.app/Contents/SharedSupport/displayline'
  " let g:vimtex_view_general_options = '--unique @pdf\#src:@line@tex'
'''
on_ft = 'tex'

#----------------------------------------------
# Others
#----------------------------------------------
[[plugins]]
repo = 'cohama/lexima.vim'
hook_source = '''
  " LaTeX settings
  call lexima#add_rule({'char': '$', 'input_after': '$', 'filetype': 'tex'})
  call lexima#add_rule({'char': '$', 'at': '\%#\$', 'leave': 1, 'filetype': 'tex'})
  call lexima#add_rule({'char': '<BS>', 'at': '\$\%#\$', 'delete': 1, 'filetype': 'tex'})
'''
on_i = 1

#----------------------------------------------
# Syntax highlights
#----------------------------------------------
[[plugins]]
repo = 'dag/vim-fish'
on_ft = 'fish'

[[plugins]]
repo = 'udalov/kotlin-vim'
on_ft = 'kotlin'

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'

[[plugins]]
repo = 'digitaltoad/vim-pug'
on_ft = 'pug'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = 'let g:vim_markdown_folding_disabled=1'
on_ft = 'markdown'

[[plugins]]
repo = 'qnighy/satysfi.vim'
on_ft = 'saty'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'vim-scripts/AnsiEsc.vim'
